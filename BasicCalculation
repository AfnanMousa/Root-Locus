from mpmath import *
from np import *
from sympy import *
from future import *
from matplotlib.lines import Line2D
from matplotlib.patches import Arc
from math import *
from termcolor import colored
import matplotlib.pyplot as plt
import numpy
NumberOfPoles =int (input("Input Number of Poles :"))
Poles=[] #[0j, (-25+0j), (-50+10j), (-50-10j)]
BreakAway=[]
for i in range(0, NumberOfPoles):
    ele = complex(input("Input The element in the array :"))
    Poles.append(ele)

Poles=sort_complex(Poles)
print(colored('The Poles :','green'),Poles)
NumberAngle=(NumberOfPoles)
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
def PlotPoles():
    RealPoint =[]
    IMagenPoint=[]
    for i in range(0,len(Poles)):
        RealPoint.append(Poles[i].real)
        IMagenPoint.append(Poles[i].imag)
    # ploting in the centre

    # Move left y-axis and bottim x-axis to centre, passing through (0,0)
    ax.spines['left'].set_position(('data',0))
    ax.spines['bottom'].set_position(('data',0))

    # Eliminate upper and right axes
    ax.spines['right'].set_color('none')
    ax.spines['top'].set_color('none')

    # Show ticks in the left and lower axes only
    ax.xaxis.set_ticks_position('bottom')
    ax.yaxis.set_ticks_position('left')
    # end the ploting
    plt.scatter(RealPoint, IMagenPoint,color='blue')

    return
PlotPoles()
def AngleOfAsymptotes():
        Angles=[]
        for i in range (0,NumberAngle) :
            angle = (((2 * i + 1) * 180) / NumberAngle)
            Angles.append(angle)

        return Angles

def CentreAsymptotes() :
    Summetion=Poles[0]
    for i in range(1,NumberAngle) :
        Summetion=Summetion+Poles[i]
    return ((Summetion)/NumberAngle);


def DrawAsymptotes():
    centre = CentreAsymptotes()

    ArrayOfAngles = AngleOfAsymptotes()
    print(colored('The Angles Of Asymptotes line :','blue'),ArrayOfAngles)
    length = 150
    for i in range(0,len(ArrayOfAngles)):
        endy = length * math.sin(math.radians(ArrayOfAngles[i]))
        endx = length * math.cos(math.radians(ArrayOfAngles[i]))
        plt.plot([centre.real, endx+centre.real], [0, endy], "--k")
    plt.plot(centre.real, 0, 'x', color='red')
    print(colored('The Centre of Asymptotes line :','green'),centre)
    return

DrawAsymptotes()


def BreakAwayPoint() :
    s=symbols('s')
    Multiply=(s-Poles[0])
    for i in range(1,NumberOfPoles) :
        Multiply=(s-Poles[i])*Multiply
    fun = expand(Multiply) # print("Multiply",Multiply)
    print(colored('The characterstic Equation After Simplify :','blue'),fun)
    charactersticEquation = diff(fun, s)
    charactersticEquation=simplify(charactersticEquation)
    print(colored('The characterstic Equation After Differentiation :','blue'),charactersticEquation)
    y=[]
    x=(solve(charactersticEquation))  # print("Root Of Characterstic Equation Before symplify",x)
    for i in range (0,len(x)) :
        if (complex(x[i]).imag)<1 :
            y.append(complex(x[i]).real)
    print(colored('Root Of The Derivative Of The Characterstic Equation : ', 'blue'), y)
    PointBreakAway=[]
    for i in range (0,len(y)) :
        for j in range(1,NumberOfPoles) :
            if((Poles[j-1].imag==0j)and(Poles[j].imag==0j)) :
                if((j%2!=0)):
                    plt.plot([Poles[j-1].real, Poles[j].real], [0.2, 0.2],color='cyan')
                    plt.plot([Poles[j - 1].real, Poles[j].real], [-0.2, -0.2], color='cyan')
                    if(((Poles[j-1].real<y[i])and(y[i]<Poles[j].real))):
                        PointBreakAway.append(y[i])
    for j in range(0,len(PointBreakAway)):
        plt.plot(PointBreakAway[j], 0, 'x', color='red')
    BreakAway = PointBreakAway
    print(colored('Break Away Points : ', 'green'),PointBreakAway)
    return fun;



def Routh():
    s = symbols('s')
    k = symbols('k')
    fun = BreakAwayPoint()
    NumberOfRows = (solve(fun))
    # print(len(NumberOfRows))
    fun=fun+k
    a = Poly(fun, s)
    Coeff=a.coeffs()# print(Coeff)
    NumberCoulum=int((len(NumberOfRows)+2)/2)
    if(len(NumberOfRows)%2!=0):
        NumberCoulum = int((len(NumberOfRows)+ 1) / 2)
    RouthArray=[[0 for x in range(NumberCoulum)] for y in range(len(NumberOfRows)+1)]
    j=0
    flag2 = false
    flag = false
    for i in range(len(NumberOfRows),-1,-1): # print("i",i)
        if((i%2)==0):
            RouthArray[0][j]=fun.coeff(s, i) # print(fun.coeff(s, i))
            flag=true
        else:            # print(fun.coeff(s, i))
            RouthArray[1][j]=fun.coeff(s, i)
            flag2 = true
        if(flag==true and flag2==true) :
            j=j+1
            flag2=false
            flag = false
    for i in range(2,len(NumberOfRows)+1) :
        for z in range(0,NumberCoulum-1) :
            RouthArray[i][z]=((RouthArray[i-1][0]*RouthArray[i-2][z+1])-(RouthArray[i-1][z+1]*RouthArray[i-2][z]))/(RouthArray[i-1][0])
    print(colored('The Routh Table : ', 'blue'),RouthArray)
    return RouthArray



def ImagAxisCrossing ():
    RouthArray = Routh()
    fun=RouthArray[len(RouthArray)-2][0]
    PointCrossImageAxis=[]
    ValueK = (solve(fun))
    if(ValueK[0]>0):
        print(colored('The Value Of Symbol K : ', 'blue'),ValueK)
        s = symbols('s')
        FunOfS = (RouthArray[len(RouthArray) - 3][0])
        FunOfS = FunOfS * (s ** 2)
        FunOfS = FunOfS + (ValueK[0])
        PointCrossImageAxis = (solve(FunOfS))
        print(colored('The Points Of The Intersections with the Imaginary axis : ', 'green'),PointCrossImageAxis)
        for i in range(0, len(PointCrossImageAxis)):
            plt.plot(0, complex(PointCrossImageAxis[i]).imag, 'o', color='magenta')
        y=linspace(-100,100,300)
        a = -9.150390136812927 + 31.25
        temp=1+(y/a)**2
        x=a*(numpy.sqrt(temp))+(-31.25)
        plt.plot(x,y)
        x = linspace(-125, -50, 300)
        y=numpy.sqrt((x + 31.25) ** 2 - 2 - 15.9 ** 2)
        plt.plot(x, y,color='purple')
        x = linspace(-125, -50, 300)
        y = -1*numpy.sqrt((x + 31.25) ** 2 - 2 - (15.9 ** 2))
        plt.plot(x, y,color='magenta')

    return PointCrossImageAxis

ImagAxisCrossing()



def angle(X1,X2,Y1,Y2) :
    offset=2
    LENGTH = numpy.sqrt((X1- X2)**2 + (Y1- Y2)**2)
    # print(LENGTH)
    plt.plot([X1, X2], [Y1, Y2],":", color='blue')

    ANGLE = arccos((X2 - X1) / LENGTH)
    ANGLE=ANGLE*(180/pi)
    if(Y2>Y1):
        ANGLE=360 - ANGLE

    return ANGLE

def AngleOfDeparture():
    x=[]
    flag=1
    for i in range (0,len(Poles)) :
        if(Poles[i].imag!=0):
            sum=0
            for j in range(0,len(Poles)):
                if(j!=i):
                    if(Poles[j].imag==0) :
                        ANGLE=angle(Poles[j].real,Poles[i].real,0,Poles[i].imag)
                        Angle = "%0.2f" % float(ANGLE) + u"\u00b0"
                        sum = sum + (ANGLE)
                        if(flag==1):
                             ax.annotate(Angle, (Poles[j].real,flag))
                    else:
                        ANGLE = angle(Poles[j].real,Poles[i].real,Poles[j].imag,Poles[i].imag)
                        Angle = "%0.2f" % float(ANGLE) + u"\u00b0"
                        sum = sum + (ANGLE)
                        if (flag == 1):
                            ax.annotate(Angle, (Poles[j].real, flag))
            sum=180-sum
            flag=0
            y=[Poles[i],sum]
            x.append(y)
    print(colored('The Departure Angles For Complex Poles : ', 'blue'),x)
    plt.xlim([-75, 25])
    plt.ylim([-50, 50])
    plt.show()
    return

AngleOfDeparture()
